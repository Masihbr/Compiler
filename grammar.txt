Program -> Statements
Statements -> Statement ; Statements
Statements -> ''
Statement -> Compound_stmt
Statement -> Simple_stmt
Simple_stmt -> Assignment_Call
Simple_stmt -> Return_stmt
Simple_stmt -> Global_stmt
Simple_stmt -> break
Simple_stmt -> continue
Compound_stmt -> Function_def
Compound_stmt -> If_stmt
Compound_stmt -> Iteration_stmt
Assignment_Call -> #pid ID B
B -> = C #assign
B -> [ Expression ] = C #assign
B -> ( Arguments ) #func_call_finish
C -> Expression
C -> [ Expression List_Rest ]
List_Rest -> , Expression List_Rest
List_Rest -> ''
Return_stmt -> return Return_Value
Return_Value -> Expression
Return_Value -> ''
Global_stmt -> global ID
Function_def -> def #pid ID ( Params ) : Statements
Params -> #pid ID Params_Prime
Params -> ''
Params_Prime -> , #pid ID Params_Prime
Params_Prime -> ''
If_stmt -> if Relational_Expression #save : Statements Else_block
Else_block -> else : #jpf_save Statements #jp
Else_block -> '' #jpf
Iteration_stmt -> while ( Relational_Expression ) Statements
Relational_Expression -> Expression #comp_op Relop Expression #comp
Relop -> ==
Relop -> <
Expression -> Term Expression_Prime
Expression_Prime -> + Term Expression_Prime
Expression_Prime -> - Term Expression_Prime
Expression_Prime -> ''
Term -> Factor Term_Prime
Term_Prime -> * Factor Term_Prime
Term_Prime -> ''
Factor -> Atom Power
Power -> ** Factor
Power -> Primary
Primary -> [ Expression ] Primary
Primary -> ( Arguments ) Primary
Primary -> ''
Arguments -> Expression Arguments_Prime
Arguments -> ''
Arguments_Prime -> , Expression Arguments_Prime
Arguments_Prime -> ''
Atom -> #pid ID
Atom -> #pnum NUM
#save -> ''
#save_jpf -> ''
#jpf -> ''
#jp -> ''
#pid -> ''
#pnum -> ''
#assign -> ''
#func_call_finish -> ''