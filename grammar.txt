Program -> Statements #jump_main
Statements -> Statement ; Statements
Statements -> ''
Statement -> Compound_stmt
Statement -> Simple_stmt
Simple_stmt -> Assignment_Call
Simple_stmt -> Return_stmt
Simple_stmt -> Global_stmt
Simple_stmt -> break #break
Simple_stmt -> continue #continue
Compound_stmt -> Function_def
Compound_stmt -> If_stmt
Compound_stmt -> Iteration_stmt
Assignment_Call -> #psym ID B
B -> #add_sym = C #assign
B -> #check_sym [ Expression #index ] = C #assign
B -> #check_sym #func_call_start ( Arguments ) #func_call_finish #pop
C -> Expression
C -> #arr_init [ Expression #parr List_Rest ] #arr_len
List_Rest -> , Expression #parr List_Rest
List_Rest -> ''
Return_stmt -> return Return_Value #func_def_finish
Return_Value -> Expression #has_return_value
Return_Value -> '' #push_zero
Global_stmt -> global #global ID
Function_def -> def #pfunc ID #save_func #set_func_start ( Params ) #func_def_start : Statements #push_zero #func_def_finish #pop_func_address #check_func
Params -> #pparam ID Params_Prime
Params -> ''
Params_Prime -> , #pparam ID Params_Prime
Params_Prime -> ''
If_stmt -> if Relational_Expression #save : Statements Else_block
Else_block -> else : #jpf_save Statements #jp
Else_block -> '' #jpf
Iteration_stmt -> while #label ( Relational_Expression ) #save Statements #while
Relational_Expression -> Expression #check_void #comp_op Relop Expression #check_void #comp
Relop -> ==
Relop -> <
Expression -> Term Expression_Prime
Expression_Prime -> + #check_void Term #check_void #add Expression_Prime
Expression_Prime -> - #check_void Term #check_void #sub Expression_Prime
Expression_Prime -> ''
Term -> Factor Term_Prime
Term_Prime -> * #check_void Factor #check_void #mult Term_Prime
Term_Prime -> ''
Factor -> Atom Power
Power -> ** #check_void Factor #check_void #power
Power -> Primary
Primary -> [ Expression #index ] Primary
Primary -> #func_call_start ( Arguments ) #func_call_finish Primary
Primary -> ''
Arguments -> Expression #add_arg Arguments_Prime
Arguments -> ''
Arguments_Prime -> , Expression #add_arg Arguments_Prime
Arguments_Prime -> ''
Atom -> #pid ID
Atom -> #pnum NUM